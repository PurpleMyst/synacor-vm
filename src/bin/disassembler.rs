const START: usize = 1458;
const END: usize = 6067;

const INSTRUCTIONS: [(&str, usize); 22] = [
    ("halt", 0),
    ("set", 2),
    ("push", 1),
    ("pop", 1),
    ("eq", 3),
    ("gt", 3),
    ("jmp", 1),
    ("jt", 2),
    ("jf", 2),
    ("add", 3),
    ("mult", 3),
    ("mod", 3),
    ("and", 3),
    ("or", 3),
    ("not", 2),
    ("rmem", 2),
    ("wmem", 2),
    ("call", 1),
    ("ret", 0),
    ("out", 1),
    ("in", 1),
    ("noop", 0),
];

const VISITED: &[usize] = &[
    1458, 1460, 1462, 1464, 1466, 1468, 1471, 1474, 1477, 1480, 1484, 1488, 1491, 1495, 1498, 1500,
    1504, 1507, 1509, 1511, 1513, 1515, 1517, 1531, 1533, 1536, 1538, 1540, 1542, 1543, 1545, 1547,
    1550, 1553, 1555, 1558, 1561, 1566, 1568, 1570, 1571, 1573, 1575, 1578, 1581, 1583, 1585, 1587,
    1588, 1590, 1592, 1595, 1598, 1600, 1602, 1604, 1605, 1609, 1612, 1615, 1618, 1619, 1621, 1625,
    1629, 1632, 1636, 1639, 1642, 1645, 1647, 1648, 1650, 1653, 1655, 1657, 1660, 1663, 1666, 1667,
    1669, 1671, 1673, 1675, 1678, 1681, 1685, 1688, 1692, 1695, 1698, 1701, 1703, 1706, 1709, 1711,
    1714, 1716, 1718, 1720, 1722, 1787, 1791, 1795, 1798, 1800, 1804, 1807, 1810, 1814, 1816, 1819,
    1823, 1830, 1832, 1834, 1836, 1838, 1840, 2125, 2127, 2129, 2133, 2136, 2140, 2144, 2146, 2148,
    2826, 2828, 2830, 2833, 2836, 2838, 2842, 2848, 2851, 2854, 2856, 2859, 2862, 2865, 2867, 2869,
    2872, 2876, 2885, 2889, 2893, 2896, 2899, 2903, 2906, 2910, 2913, 2917, 2920, 2924, 2928, 2932,
    2935, 2939, 2942, 2950, 3568, 3570, 3572, 3574, 3577, 3581, 3584, 3587, 3591, 3594, 3597, 5445,
    5447, 5449, 5451, 5454, 5456, 5458, 5460, 5463, 5466, 5470, 5472, 5474, 5476, 5478, 5479, 5480,
    5481, 5482, 5483, 5486, 5489, 5921, 5923, 5925, 5928, 5931, 5934, 5936, 5940, 5943, 5947, 5951,
    5954, 5959, 5961, 5963, 5964, 5966, 5969, 5973, 5976, 5978, 5980, 5983, 5986, 5989, 6027, 6030,
    6034, 6035, 6038, 6042, 6045, 6047, 6048, 6050, 6054, 6056, 6059, 6061, 6065, 6067,
];

use std::{fs, io};

use eyre::Result;

use synacor_vm::VM;

struct Argument(u32);

impl std::fmt::Display for Argument {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if self.0 <= 32767 {
            write!(f, "{}", self.0)
        } else if self.0 <= 32775 {
            write!(f, "r{}", self.0 - 32768)
        } else {
            Err(std::fmt::Error)
        }
    }
}

fn main() -> Result<()> {
    let vm = VM::load_snapshot(
        io::Cursor::new(Vec::new()),
        io::Cursor::new(Vec::new()),
        fs::File::open("snapshots/03_teleporter.snapshot.bin")?,
    )?;

    let mut pc = START;

    while pc <= END {
        if pc == vm.pc {
            print!("--> ");
        } else if VISITED.binary_search(&pc).is_ok() {
            print!("-   ");
        } else {
            print!("    ");
        }
        print!("{}: ", pc);
        let opcode = vm.memory[pc];
        let (mnemonic, args) = match INSTRUCTIONS.get(opcode as usize) {
            Some(&x) => x,
            None => {
                println!("???");
                pc += 1;
                continue;
            }
        };
        pc += 1;

        print!("{}", mnemonic);

        for _ in 0..args {
            print!(" {}", Argument(vm.memory[pc]));
            pc += 1;
        }
        println!();
    }

    Ok(())
}
